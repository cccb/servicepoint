// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(servicepoint_binding_uniffiFFI)
import servicepoint_binding_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_servicepoint_binding_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_servicepoint_binding_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol BitVecProtocol : AnyObject {
    
    func copyRaw()  -> Data
    
    func equals(other: BitVec)  -> Bool
    
    func fill(value: Bool) 
    
    func get(index: UInt64)  -> Bool
    
    func len()  -> UInt64
    
    func set(index: UInt64, value: Bool) 
    
}

open class BitVec:
    BitVecProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_bitvec(self.pointer, $0) }
    }
public convenience init(size: UInt64) {
    let pointer =
        try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_new(
        FfiConverterUInt64.lower(size),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_bitvec(pointer, $0) }
    }

    
public static func clone(other: BitVec) -> BitVec {
    return try!  FfiConverterTypeBitVec.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_clone(
        FfiConverterTypeBitVec.lower(other),$0
    )
})
}
    
public static func load(data: Data) -> BitVec {
    return try!  FfiConverterTypeBitVec.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_load(
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func copyRaw() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_copy_raw(self.uniffiClonePointer(),$0
    )
})
}
    
open func equals(other: BitVec) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_equals(self.uniffiClonePointer(),
        FfiConverterTypeBitVec.lower(other),$0
    )
})
}
    
open func fill(value: Bool) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_fill(self.uniffiClonePointer(),
        FfiConverterBool.lower(value),$0
    )
}
}
    
open func get(index: UInt64) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_get(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(index),$0
    )
})
}
    
open func len() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_len(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(index: UInt64, value: Bool) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitvec_set(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(index),
        FfiConverterBool.lower(value),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBitVec: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BitVec

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BitVec {
        return BitVec(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BitVec) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BitVec {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BitVec, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitVec_lift(_ pointer: UnsafeMutableRawPointer) throws -> BitVec {
    return try FfiConverterTypeBitVec.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitVec_lower(_ value: BitVec) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBitVec.lower(value)
}




public protocol BitmapProtocol : AnyObject {
    
    func copyRaw()  -> Data
    
    func equals(other: Bitmap)  -> Bool
    
    func fill(value: Bool) 
    
    func get(x: UInt64, y: UInt64)  -> Bool
    
    func height()  -> UInt64
    
    func set(x: UInt64, y: UInt64, value: Bool) 
    
    func width()  -> UInt64
    
}

open class Bitmap:
    BitmapProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_bitmap(self.pointer, $0) }
    }
public convenience init(width: UInt64, height: UInt64) {
    let pointer =
        try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_bitmap(pointer, $0) }
    }

    
public static func clone(other: Bitmap) -> Bitmap {
    return try!  FfiConverterTypeBitmap.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_clone(
        FfiConverterTypeBitmap.lower(other),$0
    )
})
}
    
public static func load(width: UInt64, height: UInt64, data: Data) -> Bitmap {
    return try!  FfiConverterTypeBitmap.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_load(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),
        FfiConverterData.lower(data),$0
    )
})
}
    
public static func newMaxSized() -> Bitmap {
    return try!  FfiConverterTypeBitmap.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new_max_sized($0
    )
})
}
    

    
open func copyRaw() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_copy_raw(self.uniffiClonePointer(),$0
    )
})
}
    
open func equals(other: Bitmap) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_equals(self.uniffiClonePointer(),
        FfiConverterTypeBitmap.lower(other),$0
    )
})
}
    
open func fill(value: Bool) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_fill(self.uniffiClonePointer(),
        FfiConverterBool.lower(value),$0
    )
}
}
    
open func get(x: UInt64, y: UInt64) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_get(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),$0
    )
})
}
    
open func height() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_height(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(x: UInt64, y: UInt64, value: Bool) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_set(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),
        FfiConverterBool.lower(value),$0
    )
}
}
    
open func width() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_bitmap_width(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBitmap: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Bitmap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Bitmap {
        return Bitmap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Bitmap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bitmap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Bitmap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitmap_lift(_ pointer: UnsafeMutableRawPointer) throws -> Bitmap {
    return try FfiConverterTypeBitmap.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitmap_lower(_ value: Bitmap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBitmap.lower(value)
}




public protocol BrightnessGridProtocol : AnyObject {
    
    func copyRaw()  -> Data
    
    func equals(other: BrightnessGrid)  -> Bool
    
    func fill(value: UInt8) 
    
    func get(x: UInt64, y: UInt64)  -> UInt8
    
    func height()  -> UInt64
    
    func set(x: UInt64, y: UInt64, value: UInt8) 
    
    func width()  -> UInt64
    
}

open class BrightnessGrid:
    BrightnessGridProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_brightnessgrid(self.pointer, $0) }
    }
public convenience init(width: UInt64, height: UInt64) {
    let pointer =
        try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_new(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_brightnessgrid(pointer, $0) }
    }

    
public static func clone(other: BrightnessGrid) -> BrightnessGrid {
    return try!  FfiConverterTypeBrightnessGrid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_clone(
        FfiConverterTypeBrightnessGrid.lower(other),$0
    )
})
}
    
public static func load(width: UInt64, height: UInt64, data: Data) -> BrightnessGrid {
    return try!  FfiConverterTypeBrightnessGrid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_load(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func copyRaw() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_copy_raw(self.uniffiClonePointer(),$0
    )
})
}
    
open func equals(other: BrightnessGrid) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_equals(self.uniffiClonePointer(),
        FfiConverterTypeBrightnessGrid.lower(other),$0
    )
})
}
    
open func fill(value: UInt8) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_fill(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(value),$0
    )
}
}
    
open func get(x: UInt64, y: UInt64) -> UInt8 {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_get(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),$0
    )
})
}
    
open func height() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_height(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(x: UInt64, y: UInt64, value: UInt8) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_set(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),
        FfiConverterUInt8.lower(value),$0
    )
}
}
    
open func width() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_width(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBrightnessGrid: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BrightnessGrid

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BrightnessGrid {
        return BrightnessGrid(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BrightnessGrid) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BrightnessGrid {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BrightnessGrid, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBrightnessGrid_lift(_ pointer: UnsafeMutableRawPointer) throws -> BrightnessGrid {
    return try FfiConverterTypeBrightnessGrid.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBrightnessGrid_lower(_ value: BrightnessGrid) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBrightnessGrid.lower(value)
}




public protocol CharGridProtocol : AnyObject {
    
    func asString()  -> String
    
    func equals(other: CharGrid)  -> Bool
    
    func fill(value: String) throws 
    
    func get(x: UInt64, y: UInt64)  -> String
    
    func height()  -> UInt64
    
    func set(x: UInt64, y: UInt64, value: String) throws 
    
    func width()  -> UInt64
    
}

open class CharGrid:
    CharGridProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_chargrid(self.pointer, $0) }
    }
public convenience init(width: UInt64, height: UInt64) {
    let pointer =
        try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_chargrid_new(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_chargrid(pointer, $0) }
    }

    
public static func clone(other: CharGrid) -> CharGrid {
    return try!  FfiConverterTypeCharGrid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_chargrid_clone(
        FfiConverterTypeCharGrid.lower(other),$0
    )
})
}
    
public static func load(data: String) -> CharGrid {
    return try!  FfiConverterTypeCharGrid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_chargrid_load(
        FfiConverterString.lower(data),$0
    )
})
}
    

    
open func asString() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_as_string(self.uniffiClonePointer(),$0
    )
})
}
    
open func equals(other: CharGrid) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_equals(self.uniffiClonePointer(),
        FfiConverterTypeCharGrid.lower(other),$0
    )
})
}
    
open func fill(value: String)throws  {try rustCallWithError(FfiConverterTypeCharGridError.lift) {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_fill(self.uniffiClonePointer(),
        FfiConverterString.lower(value),$0
    )
}
}
    
open func get(x: UInt64, y: UInt64) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_get(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),$0
    )
})
}
    
open func height() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_height(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(x: UInt64, y: UInt64, value: String)throws  {try rustCallWithError(FfiConverterTypeCharGridError.lift) {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_set(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),
        FfiConverterString.lower(value),$0
    )
}
}
    
open func width() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_chargrid_width(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCharGrid: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CharGrid

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CharGrid {
        return CharGrid(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CharGrid) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CharGrid {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CharGrid, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCharGrid_lift(_ pointer: UnsafeMutableRawPointer) throws -> CharGrid {
    return try FfiConverterTypeCharGrid.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCharGrid_lower(_ value: CharGrid) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCharGrid.lower(value)
}




public protocol CommandProtocol : AnyObject {
    
    func equals(other: Command)  -> Bool
    
}

open class Command:
    CommandProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_command(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_command(pointer, $0) }
    }

    
public static func bitmapLinear(offset: UInt64, bitmap: BitVec, compression: CompressionCode) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear(
        FfiConverterUInt64.lower(offset),
        FfiConverterTypeBitVec.lower(bitmap),
        FfiConverterTypeCompressionCode.lower(compression),$0
    )
})
}
    
public static func bitmapLinearAnd(offset: UInt64, bitmap: BitVec, compression: CompressionCode) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_and(
        FfiConverterUInt64.lower(offset),
        FfiConverterTypeBitVec.lower(bitmap),
        FfiConverterTypeCompressionCode.lower(compression),$0
    )
})
}
    
public static func bitmapLinearOr(offset: UInt64, bitmap: BitVec, compression: CompressionCode) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_or(
        FfiConverterUInt64.lower(offset),
        FfiConverterTypeBitVec.lower(bitmap),
        FfiConverterTypeCompressionCode.lower(compression),$0
    )
})
}
    
public static func bitmapLinearWin(offsetX: UInt64, offsetY: UInt64, bitmap: Bitmap, compression: CompressionCode) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_win(
        FfiConverterUInt64.lower(offsetX),
        FfiConverterUInt64.lower(offsetY),
        FfiConverterTypeBitmap.lower(bitmap),
        FfiConverterTypeCompressionCode.lower(compression),$0
    )
})
}
    
public static func bitmapLinearXor(offset: UInt64, bitmap: BitVec, compression: CompressionCode) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_xor(
        FfiConverterUInt64.lower(offset),
        FfiConverterTypeBitVec.lower(bitmap),
        FfiConverterTypeCompressionCode.lower(compression),$0
    )
})
}
    
public static func brightness(brightness: UInt8)throws  -> Command {
    return try  FfiConverterTypeCommand.lift(try rustCallWithError(FfiConverterTypeServicePointError.lift) {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_brightness(
        FfiConverterUInt8.lower(brightness),$0
    )
})
}
    
public static func charBrightness(offsetX: UInt64, offsetY: UInt64, grid: BrightnessGrid) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_char_brightness(
        FfiConverterUInt64.lower(offsetX),
        FfiConverterUInt64.lower(offsetY),
        FfiConverterTypeBrightnessGrid.lower(grid),$0
    )
})
}
    
public static func clear() -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_clear($0
    )
})
}
    
public static func clone(other: Command) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_clone(
        FfiConverterTypeCommand.lower(other),$0
    )
})
}
    
public static func cp437Data(offsetX: UInt64, offsetY: UInt64, grid: Cp437Grid) -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_cp437_data(
        FfiConverterUInt64.lower(offsetX),
        FfiConverterUInt64.lower(offsetY),
        FfiConverterTypeCp437Grid.lower(grid),$0
    )
})
}
    
public static func fadeOut() -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_fade_out($0
    )
})
}
    
public static func hardReset() -> Command {
    return try!  FfiConverterTypeCommand.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_command_hard_reset($0
    )
})
}
    

    
open func equals(other: Command) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_command_equals(self.uniffiClonePointer(),
        FfiConverterTypeCommand.lower(other),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCommand: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Command

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Command {
        return Command(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Command) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Command {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Command, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommand_lift(_ pointer: UnsafeMutableRawPointer) throws -> Command {
    return try FfiConverterTypeCommand.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommand_lower(_ value: Command) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCommand.lower(value)
}




public protocol ConnectionProtocol : AnyObject {
    
    func send(command: Command) throws 
    
}

open class Connection:
    ConnectionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_connection(self.pointer, $0) }
    }
public convenience init(host: String)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeServicePointError.lift) {
    uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new(
        FfiConverterString.lower(host),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_connection(pointer, $0) }
    }

    
public static func newFake() -> Connection {
    return try!  FfiConverterTypeConnection.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new_fake($0
    )
})
}
    

    
open func send(command: Command)throws  {try rustCallWithError(FfiConverterTypeServicePointError.lift) {
    uniffi_servicepoint_binding_uniffi_fn_method_connection_send(self.uniffiClonePointer(),
        FfiConverterTypeCommand.lower(command),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnection: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Connection

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Connection {
        return Connection(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Connection) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Connection {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Connection, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnection_lift(_ pointer: UnsafeMutableRawPointer) throws -> Connection {
    return try FfiConverterTypeConnection.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnection_lower(_ value: Connection) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConnection.lower(value)
}




public protocol Cp437GridProtocol : AnyObject {
    
    func copyRaw()  -> Data
    
    func equals(other: Cp437Grid)  -> Bool
    
    func fill(value: UInt8) 
    
    func get(x: UInt64, y: UInt64)  -> UInt8
    
    func height()  -> UInt64
    
    func set(x: UInt64, y: UInt64, value: UInt8) 
    
    func width()  -> UInt64
    
}

open class Cp437Grid:
    Cp437GridProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_servicepoint_binding_uniffi_fn_clone_cp437grid(self.pointer, $0) }
    }
public convenience init(width: UInt64, height: UInt64) {
    let pointer =
        try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_new(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_servicepoint_binding_uniffi_fn_free_cp437grid(pointer, $0) }
    }

    
public static func clone(other: Cp437Grid) -> Cp437Grid {
    return try!  FfiConverterTypeCp437Grid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_clone(
        FfiConverterTypeCp437Grid.lower(other),$0
    )
})
}
    
public static func load(width: UInt64, height: UInt64, data: Data) -> Cp437Grid {
    return try!  FfiConverterTypeCp437Grid.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_load(
        FfiConverterUInt64.lower(width),
        FfiConverterUInt64.lower(height),
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func copyRaw() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_copy_raw(self.uniffiClonePointer(),$0
    )
})
}
    
open func equals(other: Cp437Grid) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_equals(self.uniffiClonePointer(),
        FfiConverterTypeCp437Grid.lower(other),$0
    )
})
}
    
open func fill(value: UInt8) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_fill(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(value),$0
    )
}
}
    
open func get(x: UInt64, y: UInt64) -> UInt8 {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_get(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),$0
    )
})
}
    
open func height() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_height(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(x: UInt64, y: UInt64, value: UInt8) {try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_set(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(x),
        FfiConverterUInt64.lower(y),
        FfiConverterUInt8.lower(value),$0
    )
}
}
    
open func width() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_width(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCp437Grid: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Cp437Grid

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Cp437Grid {
        return Cp437Grid(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Cp437Grid) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Cp437Grid {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Cp437Grid, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCp437Grid_lift(_ pointer: UnsafeMutableRawPointer) throws -> Cp437Grid {
    return try FfiConverterTypeCp437Grid.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCp437Grid_lower(_ value: Cp437Grid) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCp437Grid.lower(value)
}


public enum CharGridError {

    
    
    case StringNotOneChar
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCharGridError: FfiConverterRustBuffer {
    typealias SwiftType = CharGridError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CharGridError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .StringNotOneChar

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CharGridError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .StringNotOneChar:
            writeInt(&buf, Int32(1))
        
        }
    }
}


extension CharGridError: Equatable, Hashable {}

extension CharGridError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum CompressionCode : UInt16 {
    
    /**
     * no compression
     */
    case uncompressed = 0
    /**
     * compress using flate2 with zlib header
     */
    case zlib = 26490
    /**
     * compress using bzip2
     */
    case bzip2 = 25210
    /**
     * compress using lzma
     */
    case lzma = 27770
    /**
     * compress using Zstandard
     */
    case zstd = 31347
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCompressionCode: FfiConverterRustBuffer {
    typealias SwiftType = CompressionCode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CompressionCode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .uncompressed
        
        case 2: return .zlib
        
        case 3: return .bzip2
        
        case 4: return .lzma
        
        case 5: return .zstd
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CompressionCode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .uncompressed:
            writeInt(&buf, Int32(1))
        
        
        case .zlib:
            writeInt(&buf, Int32(2))
        
        
        case .bzip2:
            writeInt(&buf, Int32(3))
        
        
        case .lzma:
            writeInt(&buf, Int32(4))
        
        
        case .zstd:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCompressionCode_lift(_ buf: RustBuffer) throws -> CompressionCode {
    return try FfiConverterTypeCompressionCode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCompressionCode_lower(_ value: CompressionCode) -> RustBuffer {
    return FfiConverterTypeCompressionCode.lower(value)
}



extension CompressionCode: Equatable, Hashable {}




public enum ServicePointError {

    
    
    case IoError(error: String
    )
    case InvalidBrightness(value: UInt8
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeServicePointError: FfiConverterRustBuffer {
    typealias SwiftType = ServicePointError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ServicePointError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .IoError(
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidBrightness(
            value: try FfiConverterUInt8.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ServicePointError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .IoError(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .InvalidBrightness(value):
            writeInt(&buf, Int32(2))
            FfiConverterUInt8.write(value, into: &buf)
            
        }
    }
}


extension ServicePointError: Equatable, Hashable {}

extension ServicePointError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_servicepoint_binding_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_copy_raw() != 44858) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_equals() != 56950) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_fill() != 49206) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_get() != 4505) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_len() != 20215) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_set() != 35617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_copy_raw() != 22381) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_equals() != 11420) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_fill() != 7742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_get() != 18964) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_height() != 45228) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_set() != 12299) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_width() != 62870) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_copy_raw() != 5114) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_equals() != 28824) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_fill() != 47185) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_get() != 39844) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_height() != 43167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_set() != 24064) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_width() != 22654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_as_string() != 28188) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_equals() != 60616) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_fill() != 45391) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_get() != 1811) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_height() != 37258) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_set() != 31547) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_chargrid_width() != 40166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_command_equals() != 10396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_connection_send() != 32639) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_copy_raw() != 3828) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_equals() != 21521) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_fill() != 20435) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_get() != 58760) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_height() != 32386) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_set() != 24881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_width() != 11243) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_clone() != 35610) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_load() != 4260) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_new() != 11119) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_clone() != 54327) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_load() != 51708) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new() != 40771) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new_max_sized() != 47687) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_clone() != 56444) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_load() != 224) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_new() != 45722) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_chargrid_clone() != 5903) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_chargrid_load() != 45804) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_chargrid_new() != 2094) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear() != 29182) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_and() != 16445) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_or() != 13434) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_win() != 32012) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_xor() != 48164) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_brightness() != 60895) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_char_brightness() != 50477) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clear() != 20330) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clone() != 42470) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_cp437_data() != 63131) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_fade_out() != 13752) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_command_hard_reset() != 62911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new() != 7315) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new_fake() != 12559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_clone() != 60629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_load() != 9195) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_new() != 8874) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all