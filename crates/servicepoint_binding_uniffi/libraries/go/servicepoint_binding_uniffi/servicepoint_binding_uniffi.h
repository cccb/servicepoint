

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!



#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V6
	#ifndef UNIFFI_SHARED_HEADER_V6
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V6
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V6
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

// Task defined in Rust that Go executes
typedef void (*RustTaskCallback)(const void *, int8_t);

// Callback to execute Rust tasks using a Go routine
//
// Args:
//   executor: ForeignExecutor lowered into a uint64_t value
//   delay: Delay in MS
//   task: RustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*ForeignExecutorCallback)(uint64_t, uint32_t, RustTaskCallback, void *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// Continuation callback for UniFFI Futures
typedef void (*RustFutureContinuation)(void * , int8_t);

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Needed because we can't execute the callback directly from go.
void cgo_rust_task_callback_bridge_servicepoint_binding_uniffi(RustTaskCallback, const void *, int8_t);

int8_t uniffiForeignExecutorCallbackservicepoint_binding_uniffi(uint64_t, uint32_t, RustTaskCallback, void*);

void uniffiFutureContinuationCallbackservicepoint_binding_uniffi(void*, int8_t);

void uniffi_servicepoint_binding_uniffi_fn_free_bitvec(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_clone(
	void* other,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_load(
	RustBuffer data,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_new(
	uint64_t size,
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_bitvec_equals(
	void* ptr,
	void* other,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_bitvec_fill(
	void* ptr,
	int8_t value,
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_bitvec_get(
	void* ptr,
	uint64_t index,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_bitvec_len(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_bitvec_set(
	void* ptr,
	uint64_t index,
	int8_t value,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_free_bitmap(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_clone(
	void* other,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_load(
	uint64_t width,
	uint64_t height,
	RustBuffer data,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new(
	uint64_t width,
	uint64_t height,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new_max_sized(
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_bitmap_equals(
	void* ptr,
	void* other,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_bitmap_fill(
	void* ptr,
	int8_t value,
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_bitmap_get(
	void* ptr,
	uint64_t x,
	uint64_t y,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_bitmap_height(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_bitmap_set(
	void* ptr,
	uint64_t x,
	uint64_t y,
	int8_t value,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_bitmap_width(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_free_brightnessgrid(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_clone(
	void* other,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_load(
	uint64_t width,
	uint64_t height,
	RustBuffer data,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_new(
	uint64_t width,
	uint64_t height,
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_equals(
	void* ptr,
	void* other,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_fill(
	void* ptr,
	uint8_t value,
	RustCallStatus* out_status
);

uint8_t uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_get(
	void* ptr,
	uint64_t x,
	uint64_t y,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_height(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_set(
	void* ptr,
	uint64_t x,
	uint64_t y,
	uint8_t value,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_width(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_free_command(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear(
	uint64_t offset,
	void* bitmap,
	RustBuffer compression,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_and(
	uint64_t offset,
	void* bitmap,
	RustBuffer compression,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_or(
	uint64_t offset,
	void* bitmap,
	RustBuffer compression,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_win(
	uint64_t offset_x,
	uint64_t offset_y,
	void* bitmap,
	RustBuffer compression,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_xor(
	uint64_t offset,
	void* bitmap,
	RustBuffer compression,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_brightness(
	uint8_t brightness,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_char_brightness(
	uint64_t offset_x,
	uint64_t offset_y,
	void* grid,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_clear(
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_clone(
	void* other,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_cp437_data(
	uint64_t offset_x,
	uint64_t offset_y,
	void* grid,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_fade_out(
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_command_hard_reset(
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_command_equals(
	void* ptr,
	void* other,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_free_connection(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new(
	RustBuffer host,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new_fake(
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_connection_send(
	void* ptr,
	void* command,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_free_cp437grid(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_clone(
	void* other,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_load(
	uint64_t width,
	uint64_t height,
	RustBuffer data,
	RustCallStatus* out_status
);

void* uniffi_servicepoint_binding_uniffi_fn_constructor_cp437grid_new(
	uint64_t width,
	uint64_t height,
	RustCallStatus* out_status
);

int8_t uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_equals(
	void* ptr,
	void* other,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_fill(
	void* ptr,
	uint8_t value,
	RustCallStatus* out_status
);

uint8_t uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_get(
	void* ptr,
	uint64_t x,
	uint64_t y,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_height(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_set(
	void* ptr,
	uint64_t x,
	uint64_t y,
	uint8_t value,
	RustCallStatus* out_status
);

uint64_t uniffi_servicepoint_binding_uniffi_fn_method_cp437grid_width(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ffi_servicepoint_binding_uniffi_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_servicepoint_binding_uniffi_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_servicepoint_binding_uniffi_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_continuation_callback_set(
	RustFutureContinuation callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_u8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_u8(
	void* handle,
	RustCallStatus* out_status
);

uint8_t ffi_servicepoint_binding_uniffi_rust_future_complete_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_i8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_i8(
	void* handle,
	RustCallStatus* out_status
);

int8_t ffi_servicepoint_binding_uniffi_rust_future_complete_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_u16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_u16(
	void* handle,
	RustCallStatus* out_status
);

uint16_t ffi_servicepoint_binding_uniffi_rust_future_complete_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_i16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_i16(
	void* handle,
	RustCallStatus* out_status
);

int16_t ffi_servicepoint_binding_uniffi_rust_future_complete_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_u32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_u32(
	void* handle,
	RustCallStatus* out_status
);

uint32_t ffi_servicepoint_binding_uniffi_rust_future_complete_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_i32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_i32(
	void* handle,
	RustCallStatus* out_status
);

int32_t ffi_servicepoint_binding_uniffi_rust_future_complete_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_u64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_u64(
	void* handle,
	RustCallStatus* out_status
);

uint64_t ffi_servicepoint_binding_uniffi_rust_future_complete_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_i64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_i64(
	void* handle,
	RustCallStatus* out_status
);

int64_t ffi_servicepoint_binding_uniffi_rust_future_complete_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_f32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_f32(
	void* handle,
	RustCallStatus* out_status
);

float ffi_servicepoint_binding_uniffi_rust_future_complete_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_f64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_f64(
	void* handle,
	RustCallStatus* out_status
);

double ffi_servicepoint_binding_uniffi_rust_future_complete_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_pointer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_pointer(
	void* handle,
	RustCallStatus* out_status
);

void* ffi_servicepoint_binding_uniffi_rust_future_complete_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_rust_buffer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

RustBuffer ffi_servicepoint_binding_uniffi_rust_future_complete_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_poll_void(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_cancel_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_free_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_servicepoint_binding_uniffi_rust_future_complete_void(
	void* handle,
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_equals(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_fill(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_get(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_len(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_set(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_equals(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_fill(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_get(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_height(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_set(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_width(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_equals(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_fill(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_get(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_height(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_set(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_width(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_command_equals(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_connection_send(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_equals(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_fill(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_get(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_height(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_set(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_method_cp437grid_width(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_clone(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_load(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_new(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_clone(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_load(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new_max_sized(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_clone(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_load(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_new(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_and(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_or(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_win(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_xor(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_brightness(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_char_brightness(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clear(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clone(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_cp437_data(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_fade_out(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_command_hard_reset(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new_fake(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_clone(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_load(
	RustCallStatus* out_status
);

uint16_t uniffi_servicepoint_binding_uniffi_checksum_constructor_cp437grid_new(
	RustCallStatus* out_status
);

uint32_t ffi_servicepoint_binding_uniffi_uniffi_contract_version(
	RustCallStatus* out_status
);



