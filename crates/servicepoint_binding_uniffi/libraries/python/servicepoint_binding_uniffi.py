# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)

class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("servicepoint_binding_uniffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_servicepoint_binding_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_fill() != 12255:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_get() != 43835:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_len() != 22196:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_set() != 16307:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_fill() != 43887:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_get() != 61136:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_height() != 44991:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_set() != 25290:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_width() != 30837:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_fill() != 63376:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_get() != 28736:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_height() != 39528:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_set() != 6330:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_width() != 26384:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_method_connection_send() != 23796:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_load() != 48913:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_new() != 11865:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_load() != 24109:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new() != 49832:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new_max_sized() != 63762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_load() != 24788:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_new() != 4979:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear() != 18079:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_and() != 18147:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_or() != 44912:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_win() != 24563:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_xor() != 54278:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_brightness() != 11291:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_char_brightness() != 29467:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clear() != 11035:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_fade_out() != 49231:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_hard_reset() != 62130:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new() != 30445:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new_fake() != 54331:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitvec.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitvec.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_load.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_load.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_new.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_fill.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_fill.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_get.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_get.restype = ctypes.c_int8
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_len.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_len.restype = ctypes.c_uint64
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_set.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitmap.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitmap.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_load.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_load.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new_max_sized.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new_max_sized.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_fill.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_fill.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_get.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_get.restype = ctypes.c_int8
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_height.restype = ctypes.c_uint64
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_set.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_width.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_width.restype = ctypes.c_uint64
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_brightnessgrid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_brightnessgrid.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_load.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_load.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_new.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_fill.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_fill.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_get.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_get.restype = ctypes.c_uint8
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_height.restype = ctypes.c_uint64
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_set.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_width.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_width.restype = ctypes.c_uint64
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_command.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_command.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear.argtypes = (
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_and.argtypes = (
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_and.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_or.argtypes = (
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_or.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_win.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_win.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_xor.argtypes = (
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_xor.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_brightness.argtypes = (
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_brightness.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_char_brightness.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_char_brightness.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_clear.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_clear.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_fade_out.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_fade_out.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_hard_reset.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_hard_reset.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_connection.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_connection.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new_fake.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new_fake.restype = ctypes.c_void_p
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_connection_send.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_connection_send.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_free.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_free_void.restype = None
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_servicepoint_binding_uniffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_fill.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_fill.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_get.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_len.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_len.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_set.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitvec_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_fill.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_fill.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_get.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_height.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_set.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_width.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_bitmap_width.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_fill.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_fill.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_get.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_height.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_set.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_width.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_brightnessgrid_width.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_connection_send.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_method_connection_send.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_load.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_load.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_new.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitvec_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_load.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_load.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new_max_sized.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_bitmap_new_max_sized.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_load.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_load.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_new.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_brightnessgrid_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_and.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_and.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_or.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_or.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_win.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_win.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_xor.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_bitmap_linear_xor.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_brightness.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_brightness.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_char_brightness.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_char_brightness.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clear.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_clear.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_fade_out.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_fade_out.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_hard_reset.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_command_hard_reset.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new_fake.argtypes = (
)
_UniffiLib.uniffi_servicepoint_binding_uniffi_checksum_constructor_connection_new_fake.restype = ctypes.c_uint16
_UniffiLib.ffi_servicepoint_binding_uniffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_servicepoint_binding_uniffi_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def write(value, buf):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))
        buf.write_i32(len(value))
        buf.write(value)



class BitVec:
    _pointer: ctypes.c_void_p
    def __init__(self, size: "int"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_new,
        _UniffiConverterUInt64.lower(size))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitvec, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def load(cls, data: "bytes"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitvec_load,
        _UniffiConverterBytes.lower(data))
        return cls._make_instance_(pointer)



    def fill(self, value: "bool"):
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_fill,self._pointer,
        _UniffiConverterBool.lower(value))







    def get(self, index: "int") -> "bool":
        
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_get,self._pointer,
        _UniffiConverterUInt64.lower(index))
        )






    def len(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_len,self._pointer,)
        )






    def set(self, index: "int",value: "bool"):
        
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitvec_set,self._pointer,
        _UniffiConverterUInt64.lower(index),
        _UniffiConverterBool.lower(value))







class _UniffiConverterTypeBitVec:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, BitVec):
            raise TypeError("Expected BitVec instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return BitVec._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Bitmap:
    _pointer: ctypes.c_void_p
    def __init__(self, width: "int",height: "int"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new,
        _UniffiConverterUInt64.lower(width),
        _UniffiConverterUInt64.lower(height))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_bitmap, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def load(cls, width: "int",height: "int",data: "bytes"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_load,
        _UniffiConverterUInt64.lower(width),
        _UniffiConverterUInt64.lower(height),
        _UniffiConverterBytes.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def new_max_sized(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_bitmap_new_max_sized,)
        return cls._make_instance_(pointer)



    def fill(self, value: "bool"):
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_fill,self._pointer,
        _UniffiConverterBool.lower(value))







    def get(self, x: "int",y: "int") -> "bool":
        
        
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_get,self._pointer,
        _UniffiConverterUInt64.lower(x),
        _UniffiConverterUInt64.lower(y))
        )






    def height(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_height,self._pointer,)
        )






    def set(self, x: "int",y: "int",value: "bool"):
        
        
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_set,self._pointer,
        _UniffiConverterUInt64.lower(x),
        _UniffiConverterUInt64.lower(y),
        _UniffiConverterBool.lower(value))







    def width(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_bitmap_width,self._pointer,)
        )






class _UniffiConverterTypeBitmap:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Bitmap):
            raise TypeError("Expected Bitmap instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Bitmap._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class BrightnessGrid:
    _pointer: ctypes.c_void_p
    def __init__(self, width: "int",height: "int"):
        
        
        self._pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_new,
        _UniffiConverterUInt64.lower(width),
        _UniffiConverterUInt64.lower(height))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_brightnessgrid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def load(cls, width: "int",height: "int",data: "bytes"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_brightnessgrid_load,
        _UniffiConverterUInt64.lower(width),
        _UniffiConverterUInt64.lower(height),
        _UniffiConverterBytes.lower(data))
        return cls._make_instance_(pointer)



    def fill(self, value: "int"):
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_fill,self._pointer,
        _UniffiConverterUInt8.lower(value))







    def get(self, x: "int",y: "int") -> "int":
        
        
        return _UniffiConverterUInt8.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_get,self._pointer,
        _UniffiConverterUInt64.lower(x),
        _UniffiConverterUInt64.lower(y))
        )






    def height(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_height,self._pointer,)
        )






    def set(self, x: "int",y: "int",value: "int"):
        
        
        
        _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_set,self._pointer,
        _UniffiConverterUInt64.lower(x),
        _UniffiConverterUInt64.lower(y),
        _UniffiConverterUInt8.lower(value))







    def width(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_brightnessgrid_width,self._pointer,)
        )






class _UniffiConverterTypeBrightnessGrid:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, BrightnessGrid):
            raise TypeError("Expected BrightnessGrid instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return BrightnessGrid._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Command:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_command, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def bitmap_linear(cls, offset: "int",bitmap: "BitVec",compression: "CompressionCode"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear,
        _UniffiConverterUInt64.lower(offset),
        _UniffiConverterTypeBitVec.lower(bitmap),
        _UniffiConverterTypeCompressionCode.lower(compression))
        return cls._make_instance_(pointer)


    @classmethod
    def bitmap_linear_and(cls, offset: "int",bitmap: "BitVec",compression: "CompressionCode"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_and,
        _UniffiConverterUInt64.lower(offset),
        _UniffiConverterTypeBitVec.lower(bitmap),
        _UniffiConverterTypeCompressionCode.lower(compression))
        return cls._make_instance_(pointer)


    @classmethod
    def bitmap_linear_or(cls, offset: "int",bitmap: "BitVec",compression: "CompressionCode"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_or,
        _UniffiConverterUInt64.lower(offset),
        _UniffiConverterTypeBitVec.lower(bitmap),
        _UniffiConverterTypeCompressionCode.lower(compression))
        return cls._make_instance_(pointer)


    @classmethod
    def bitmap_linear_win(cls, offset_x: "int",offset_y: "int",bitmap: "Bitmap",compression: "CompressionCode"):
        
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_win,
        _UniffiConverterUInt64.lower(offset_x),
        _UniffiConverterUInt64.lower(offset_y),
        _UniffiConverterTypeBitmap.lower(bitmap),
        _UniffiConverterTypeCompressionCode.lower(compression))
        return cls._make_instance_(pointer)


    @classmethod
    def bitmap_linear_xor(cls, offset: "int",bitmap: "BitVec",compression: "CompressionCode"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_bitmap_linear_xor,
        _UniffiConverterUInt64.lower(offset),
        _UniffiConverterTypeBitVec.lower(bitmap),
        _UniffiConverterTypeCompressionCode.lower(compression))
        return cls._make_instance_(pointer)


    @classmethod
    def brightness(cls, brightness: "int"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeServicePointError,_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_brightness,
        _UniffiConverterUInt8.lower(brightness))
        return cls._make_instance_(pointer)


    @classmethod
    def char_brightness(cls, offset_x: "int",offset_y: "int",grid: "BrightnessGrid"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_char_brightness,
        _UniffiConverterUInt64.lower(offset_x),
        _UniffiConverterUInt64.lower(offset_y),
        _UniffiConverterTypeBrightnessGrid.lower(grid))
        return cls._make_instance_(pointer)


    @classmethod
    def clear(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_clear,)
        return cls._make_instance_(pointer)


    @classmethod
    def fade_out(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_fade_out,)
        return cls._make_instance_(pointer)


    @classmethod
    def hard_reset(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_command_hard_reset,)
        return cls._make_instance_(pointer)



class _UniffiConverterTypeCommand:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Command):
            raise TypeError("Expected Command instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Command._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Connection:
    _pointer: ctypes.c_void_p
    def __init__(self, host: "str"):
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeServicePointError,_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new,
        _UniffiConverterString.lower(host))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_free_connection, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def new_fake(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_constructor_connection_new_fake,)
        return cls._make_instance_(pointer)



    def send(self, command: "Command"):
        
        _rust_call_with_error(
    _UniffiConverterTypeServicePointError,_UniffiLib.uniffi_servicepoint_binding_uniffi_fn_method_connection_send,self._pointer,
        _UniffiConverterTypeCommand.lower(command))







class _UniffiConverterTypeConnection:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Connection):
            raise TypeError("Expected Connection instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Connection._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer





class CompressionCode(enum.Enum):
    UNCOMPRESSED = 1
    ZLIB = 2
    BZIP2 = 3
    LZMA = 4
    ZSTD = 5
    


class _UniffiConverterTypeCompressionCode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CompressionCode.UNCOMPRESSED
        if variant == 2:
            return CompressionCode.ZLIB
        if variant == 3:
            return CompressionCode.BZIP2
        if variant == 4:
            return CompressionCode.LZMA
        if variant == 5:
            return CompressionCode.ZSTD
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == CompressionCode.UNCOMPRESSED:
            buf.write_i32(1)
        if value == CompressionCode.ZLIB:
            buf.write_i32(2)
        if value == CompressionCode.BZIP2:
            buf.write_i32(3)
        if value == CompressionCode.LZMA:
            buf.write_i32(4)
        if value == CompressionCode.ZSTD:
            buf.write_i32(5)




# ServicePointError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ServicePointError(Exception):
    pass

_UniffiTempServicePointError = ServicePointError

class ServicePointError:  # type: ignore
    class IoError(_UniffiTempServicePointError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "ServicePointError.IoError({})".format(str(self))
    _UniffiTempServicePointError.IoError = IoError # type: ignore
    class InvalidBrightness(_UniffiTempServicePointError):
        def __init__(self, value):
            super().__init__(", ".join([
                "value={!r}".format(value),
            ]))
            self.value = value
        def __repr__(self):
            return "ServicePointError.InvalidBrightness({})".format(str(self))
    _UniffiTempServicePointError.InvalidBrightness = InvalidBrightness # type: ignore

ServicePointError = _UniffiTempServicePointError # type: ignore
del _UniffiTempServicePointError


class _UniffiConverterTypeServicePointError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ServicePointError.IoError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ServicePointError.InvalidBrightness(
                value=_UniffiConverterUInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ServicePointError.IoError):
            buf.write_i32(1)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, ServicePointError.InvalidBrightness):
            buf.write_i32(2)
            _UniffiConverterUInt8.write(value.value, buf)

__all__ = [
    "InternalError",
    "CompressionCode",
    "ServicePointError",
    "BitVec",
    "Bitmap",
    "BrightnessGrid",
    "Command",
    "Connection",
]

