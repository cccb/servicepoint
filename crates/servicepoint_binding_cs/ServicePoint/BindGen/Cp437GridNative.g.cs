// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace ServicePoint.BindGen
{
    public static unsafe partial class Cp437GridNative
    {
        const string __DllName = "servicepoint_binding_c";



        /// <summary>
        ///  Creates a new [SPCp437Grid] with the specified dimensions.
        ///
        ///  returns: [SPCp437Grid] initialized to 0. Will never return NULL.
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - the returned instance is freed in some way, either by using a consuming function or
        ///    by explicitly calling `sp_cp437_grid_free`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SPCp437Grid* sp_cp437_grid_new(nuint width, nuint height);

        /// <summary>
        ///  Loads a [SPCp437Grid] with the specified dimensions from the provided data.
        ///
        ///  Will never return NULL.
        ///
        ///  # Panics
        ///
        ///  - when `data` is NULL
        ///  - when the provided `data_length` does not match `height` and `width`
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `data` points to a valid memory location of at least `data_length`
        ///    bytes in size.
        ///  - the returned instance is freed in some way, either by using a consuming function or
        ///    by explicitly calling `sp_cp437_grid_free`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_load", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SPCp437Grid* sp_cp437_grid_load(nuint width, nuint height, byte* data, nuint data_length);

        /// <summary>
        ///  Clones a [SPCp437Grid].
        ///
        ///  Will never return NULL.
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        ///  - `cp437_grid` is not written to concurrently
        ///  - the returned instance is freed in some way, either by using a consuming function or
        ///    by explicitly calling `sp_cp437_grid_free`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_clone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SPCp437Grid* sp_cp437_grid_clone(SPCp437Grid* cp437_grid);

        /// <summary>
        ///  Deallocates a [SPCp437Grid].
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        ///  - `cp437_grid` is not used concurrently or after cp437_grid call
        ///  - `cp437_grid` was not passed to another consuming function, e.g. to create a [SPCommand]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sp_cp437_grid_free(SPCp437Grid* cp437_grid);

        /// <summary>
        ///  Gets the current value at the specified position.
        ///
        ///  # Arguments
        ///
        ///  - `cp437_grid`: instance to read from
        ///  - `x` and `y`: position of the cell to read
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///  - when accessing `x` or `y` out of bounds
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        ///  - `cp437_grid` is not written to concurrently
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_get", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte sp_cp437_grid_get(SPCp437Grid* cp437_grid, nuint x, nuint y);

        /// <summary>
        ///  Sets the value of the specified position in the [SPCp437Grid].
        ///
        ///  # Arguments
        ///
        ///  - `cp437_grid`: instance to write to
        ///  - `x` and `y`: position of the cell
        ///  - `value`: the value to write to the cell
        ///
        ///  returns: old value of the cell
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///  - when accessing `x` or `y` out of bounds
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPBitVec]
        ///  - `cp437_grid` is not written to or read from concurrently
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_set", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sp_cp437_grid_set(SPCp437Grid* cp437_grid, nuint x, nuint y, byte value);

        /// <summary>
        ///  Sets the value of all cells in the [SPCp437Grid].
        ///
        ///  # Arguments
        ///
        ///  - `cp437_grid`: instance to write to
        ///  - `value`: the value to set all cells to
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        ///  - `cp437_grid` is not written to or read from concurrently
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_fill", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sp_cp437_grid_fill(SPCp437Grid* cp437_grid, byte value);

        /// <summary>
        ///  Gets the width of the [SPCp437Grid] instance.
        ///
        ///  # Arguments
        ///
        ///  - `cp437_grid`: instance to read from
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_width", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint sp_cp437_grid_width(SPCp437Grid* cp437_grid);

        /// <summary>
        ///  Gets the height of the [SPCp437Grid] instance.
        ///
        ///  # Arguments
        ///
        ///  - `cp437_grid`: instance to read from
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  # Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_height", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint sp_cp437_grid_height(SPCp437Grid* cp437_grid);

        /// <summary>
        ///  Gets an unsafe reference to the data of the [SPCp437Grid] instance.
        ///
        ///  Will never return NULL.
        ///
        ///  # Panics
        ///
        ///  - when `cp437_grid` is NULL
        ///
        ///  ## Safety
        ///
        ///  The caller has to make sure that:
        ///
        ///  - `cp437_grid` points to a valid [SPCp437Grid]
        ///  - the returned memory range is never accessed after the passed [SPCp437Grid] has been freed
        ///  - the returned memory range is never accessed concurrently, either via the [SPCp437Grid] or directly
        /// </summary>
        [DllImport(__DllName, EntryPoint = "sp_cp437_grid_unsafe_data_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SPByteSlice sp_cp437_grid_unsafe_data_ref(SPCp437Grid* cp437_grid);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct SPCp437Grid
    {
    }



}
